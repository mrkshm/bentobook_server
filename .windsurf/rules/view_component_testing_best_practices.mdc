# ViewComponent Testing Best Practices

<rule>
name: view_component_testing_best_practices
description: Ensures proper testing of ViewComponents with complex dependencies and nested method calls
filters:
  - type: file_extension
    pattern: "_spec\.rb$"
  - type: content
    pattern: "RSpec.describe.*Component"

actions:
  - type: suggest
    conditions:
      - pattern: "instance_double.*\bto_i\b"
        message: "You may be trying to stub a method on a nested object. For expressions like 'object.nested.to_i', you need to create a double for the nested object and stub the method on that double."

  - type: suggest
    conditions:
      - pattern: "allow\(.*\)\.to receive\(.*\)\.and_return\(.*\)"
      - not:
          pattern: "allow\(.*\.\w+\)\.to receive\(.*\)"
        message: "When testing components with nested method calls (like 'object.nested.method'), create separate doubles for each object in the chain and stub methods on the appropriate doubles."

  - type: suggest
    conditions:
      - pattern: "turbo_frame_tag"
      - not:
          pattern: "allow.*helpers.*receive.*turbo_frame_tag"
        message: "When testing components that use turbo_frame_tag, make sure to properly stub the helpers.turbo_frame_tag method to simulate its behavior of yielding to a block."

examples:
  - input: |
      # Bad: Trying to stub to_i on restaurant when the template uses restaurant.rating.to_i
      let(:restaurant) { instance_double("Restaurant", id: 1, rating: 3) }
      before do
        allow(restaurant).to receive(:to_i).and_return(3)
      end

      # Bad: Incorrect stubbing of turbo_frame_tag
      allow(component).to receive(:helpers).and_return(
        double(turbo_frame_tag: "<turbo-frame></turbo-frame>")
      )
    output: |
      # Good: Creating a double for the nested object and stubbing the method on it
      let(:rating) { double('Rating') }
      let(:restaurant) { instance_double("Restaurant", id: 1, rating: rating) }
      before do
        allow(rating).to receive(:to_i).and_return(3)
      end

      # Good: Properly stubbing turbo_frame_tag to handle blocks
      allow_any_instance_of(described_class).to receive(:helpers).and_return(
        double('Helpers').tap do |helpers|
          allow(helpers).to receive(:turbo_frame_tag) do |id, &block|
            "<turbo-frame id=\"#{id}\">#{block.call}</turbo-frame>"
          end
        end
      )

metadata:
  priority: medium
  version: 1.0
</rule>
