<h1>Stimulus Test Page</h1>

<div class="container mx-auto p-4">
  <h2 class="text-xl mb-4">Testing Stimulus Controllers</h2>
  
  <!-- Test Hello Controller -->
  <div class="mb-8 p-4 border rounded">
    <h3 class="font-bold mb-2">Hello Controller Test</h3>
    <div data-controller="hello" class="p-2 bg-gray-100">
      Hello there (should change to "Hello World!")
    </div>
  </div>
  
  <!-- Test Simple Dropdown -->
  <div class="mb-8 p-4 border rounded">
    <h3 class="font-bold mb-2">Simple Dropdown Test</h3>
    <div data-controller="simple-dropdown" class="relative">
      <button type="button" 
              data-simple-dropdown-target="button"
              data-action="click->simple-dropdown#toggle"
              class="bg-blue-500 text-white px-4 py-2 rounded">
        Toggle Simple Dropdown
      </button>
      <div data-simple-dropdown-target="menu" class="absolute mt-2 bg-white shadow-lg rounded p-2 border">
        <div>Test Item 1</div>
        <div>Test Item 2</div>
        <div>Test Item 3</div>
      </div>
    </div>
  </div>
  
  <!-- Test Original Dropdown Menu -->
  <div class="mb-8 p-4 border rounded">
    <h3 class="font-bold mb-2">Dropdown Menu Controller Test</h3>
    <div data-controller="dropdown-menu" class="relative">
      <button type="button"
              data-dropdown-menu-target="trigger"
              data-action="click->dropdown-menu#toggle keydown->dropdown-menu#keydown"
              class="bg-green-500 text-white px-4 py-2 rounded"
              aria-haspopup="menu" aria-expanded="false">
        Toggle Dropdown Menu
      </button>
      <div data-dropdown-menu-target="popover" data-popover aria-hidden="true"
           class="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white border border-red-500 z-50">
        <div role="menu" data-dropdown-menu-target="menu"
             data-action="mousemove->dropdown-menu#mousemove mouseleave->dropdown-menu#mouseleave click->dropdown-menu#menuItemClick"
             class="py-1">
          <div role="menuitem" class="px-4 py-2 hover:bg-gray-100">Menu Item 1</div>
          <div role="menuitem" class="px-4 py-2 hover:bg-gray-100">Menu Item 2</div>
          <div role="menuitem" class="px-4 py-2 hover:bg-gray-100">Menu Item 3</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Test Basic Dropdown -->
  <div class="mb-8 p-4 border rounded">
    <h3 class="font-bold mb-2">Basic Dropdown Test</h3>
    <div data-controller="basic-dropdown" class="relative">
      <button type="button" 
              data-basic-dropdown-target="button"
              data-action="click->basic-dropdown#toggle"
              class="bg-purple-500 text-white px-4 py-2 rounded">
        Toggle Basic Dropdown
      </button>
      <div data-basic-dropdown-target="menu" 
           class="absolute mt-2 bg-white shadow-lg rounded p-2 border border-purple-500">
        <div class="py-2 px-4">Basic Item 1</div>
        <div class="py-2 px-4">Basic Item 2</div>
        <div class="py-2 px-4">Basic Item 3</div>
      </div>
    </div>
  </div>
  
  <!-- Debug Information -->
  <div class="mt-8 p-4 border rounded bg-gray-50">
    <h3 class="font-bold mb-2">Debug Information</h3>
    <div id="debug-output" class="font-mono text-sm"></div>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const debugOutput = document.getElementById('debug-output');
        
        // Add debug information
        function addDebugInfo(message) {
          const line = document.createElement('div');
          line.textContent = message;
          debugOutput.appendChild(line);
          console.log(message); // Also log to console
        }
        
        // Add initial debug info
        addDebugInfo(`Page loaded at: ${new Date().toISOString()}`);
        
        // Check Stimulus availability
        setTimeout(function() {
          addDebugInfo('Checking Stimulus availability...');
          
          if (window.Stimulus) {
            addDebugInfo('✅ Stimulus is available globally');
            
            try {
              // List registered controllers
              addDebugInfo('Attempting to list registered controllers...');
              
              // In our setup, window.Stimulus is the application instance itself
              addDebugInfo(`Stimulus object keys: ${Object.keys(window.Stimulus).join(', ')}`);
              
              // Check for registered definitions
              if (window.Stimulus.router && window.Stimulus.router.modulesByIdentifier) {
                addDebugInfo('Found Stimulus router with modules');
                const identifiers = Object.keys(window.Stimulus.router.modulesByIdentifier);
                addDebugInfo(`Registered controller identifiers: ${identifiers.length}`);
                identifiers.forEach(id => {
                  addDebugInfo(`- Controller: ${id}`);
                });
              } else {
                addDebugInfo('Could not access Stimulus router or modules');
              }
              
              // Find elements with data-controller
              const elements = document.querySelectorAll('[data-controller]');
              addDebugInfo(`Elements with data-controller: ${elements.length}`);
              elements.forEach(el => {
                const controller = el.getAttribute('data-controller');
                addDebugInfo(`- ${controller} on ${el.tagName.toLowerCase()}`);
                
                // Add direct click handlers for testing
                if (controller === 'simple-dropdown') {
                  const trigger = el.querySelector('[data-simple-dropdown-target="button"]');
                  if (trigger) {
                    addDebugInfo(`Adding test click handler to simple dropdown trigger`);
                    trigger.addEventListener('click', function(e) {
                      addDebugInfo(`Direct click on simple dropdown trigger: ${new Date().toISOString()}`);
                      
                      try {
                        // Get the controller instance using Stimulus API
                        const controllerInstance = window.Stimulus.getControllerForElementAndIdentifier(el, 'simple-dropdown');
                        
                        if (controllerInstance) {
                          addDebugInfo('Found simple-dropdown controller instance, calling toggle directly');
                          controllerInstance.toggle(e);
                        } else {
                          addDebugInfo('Simple-dropdown controller instance not found, toggling manually');
                          
                          // Manual toggle as fallback
                          const menu = el.querySelector('[data-simple-dropdown-target="menu"]');
                          if (menu) {
                            const isHidden = menu.style.display === 'none' || menu.getAttribute('aria-hidden') === 'true';
                            addDebugInfo(`Simple menu is currently ${isHidden ? 'hidden' : 'visible'}`);
                            
                            menu.style.display = isHidden ? 'block' : 'none';
                            menu.setAttribute('aria-hidden', isHidden ? 'false' : 'true');
                            trigger.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
                            addDebugInfo(`Simple menu visibility manually toggled to ${isHidden ? 'visible' : 'hidden'}`);
                          }
                        }
                      } catch (error) {
                        addDebugInfo(`Error accessing simple-dropdown controller: ${error.message}`);
                      }
                    });
                  }
                } else if (controller === 'basic-dropdown') {
                  const trigger = el.querySelector('[data-basic-dropdown-target="button"]');
                  if (trigger) {
                    addDebugInfo(`Adding test click handler to basic dropdown trigger`);
                    trigger.addEventListener('click', function(e) {
                      addDebugInfo(`Direct click on basic dropdown trigger: ${new Date().toISOString()}`);
                      
                      try {
                        // Get the controller instance using Stimulus API
                        const controllerInstance = window.Stimulus.getControllerForElementAndIdentifier(el, 'basic-dropdown');
                        
                        if (controllerInstance) {
                          addDebugInfo('Found basic-dropdown controller instance, calling toggle directly');
                          controllerInstance.toggle(e);
                        } else {
                          addDebugInfo('Basic-dropdown controller instance not found, toggling manually');
                          
                          // Manual toggle as fallback
                          const menu = el.querySelector('[data-basic-dropdown-target="menu"]');
                          if (menu) {
                            const isHidden = menu.style.display === 'none' || menu.getAttribute('aria-hidden') === 'true';
                            addDebugInfo(`Basic menu is currently ${isHidden ? 'hidden' : 'visible'}`);
                            
                            menu.style.display = isHidden ? 'block' : 'none';
                            menu.setAttribute('aria-hidden', isHidden ? 'false' : 'true');
                            trigger.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
                            addDebugInfo(`Basic menu visibility manually toggled to ${isHidden ? 'visible' : 'hidden'}`);
                          }
                        }
                      } catch (error) {
                        addDebugInfo(`Error accessing basic-dropdown controller: ${error.message}`);
                      }
                    });
                  }
                } else if (controller === 'dropdown-menu') {
                  const trigger = el.querySelector('[data-dropdown-menu-target="trigger"]');
                  if (trigger) {
                    addDebugInfo(`Adding test click handler to dropdown trigger`);
                    trigger.addEventListener('click', function(e) {
                      addDebugInfo(`Direct click on dropdown trigger: ${new Date().toISOString()}`);
                      
                      // Try to get the controller instance
                      try {
                        // Get the controller instance using Stimulus API
                        const controllerInstance = window.Stimulus.getControllerForElementAndIdentifier(el, 'dropdown-menu');
                        
                        if (controllerInstance) {
                          addDebugInfo('Found controller instance, calling toggle directly');
                          // Call the toggle method directly
                          controllerInstance.toggle(e);
                        } else {
                          addDebugInfo('Controller instance not found, toggling manually');
                          
                          // Manual toggle as fallback
                          const menu = el.querySelector('[data-dropdown-menu-target="popover"]');
                          if (menu) {
                            const isHidden = menu.style.display === 'none' || menu.getAttribute('aria-hidden') === 'true';
                            addDebugInfo(`Menu is currently ${isHidden ? 'hidden' : 'visible'}`);
                            
                            menu.style.display = isHidden ? 'block' : 'none';
                            menu.setAttribute('aria-hidden', isHidden ? 'false' : 'true');
                            trigger.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
                            addDebugInfo(`Menu visibility manually toggled to ${isHidden ? 'visible' : 'hidden'}`);
                          }
                        }
                      } catch (error) {
                        addDebugInfo(`Error accessing controller: ${error.message}`);
                      }
                    });
                  }
                }
              });
            } catch (error) {
              addDebugInfo(`Error accessing Stimulus: ${error.message}`);
            }
          } else {
            addDebugInfo('❌ Stimulus is NOT available globally');
          }
        }, 500);
      });
      // Add more debug info after a delay to ensure all controllers are loaded
      setTimeout(() => {
        const helloElements = document.querySelectorAll('[data-controller="hello"]');
        addDebugInfo(`Hello controller elements: ${helloElements.length}`);
        
        const simpleDropdownElements = document.querySelectorAll('[data-controller="simple-dropdown"]');
        addDebugInfo(`Simple dropdown controller elements: ${simpleDropdownElements.length}`);
        
        const dropdownMenuElements = document.querySelectorAll('[data-controller="dropdown-menu"]');
        addDebugInfo(`Dropdown menu controller elements: ${dropdownMenuElements.length}`);
        
        // Add click handlers for testing
        document.querySelectorAll('button').forEach(button => {
          button.addEventListener('click', (event) => {
            addDebugInfo(`Native click on: ${event.target.textContent.trim()}`);
          });
        });
      }, 1000);
    </script>
  </div>
</div>
