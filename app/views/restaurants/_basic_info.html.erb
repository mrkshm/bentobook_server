<div class="bg-surface-50 rounded-lg shadow-lg border border-surface-200">
  <div class="p-6">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-semibold text-surface-900" id="name-display"></h2>
      <button type="button" 
              @click.prevent="editing = !editing" 
              class="inline-flex items-center rounded-md px-2.5 py-1.5 text-sm font-semibold text-surface-700 hover:bg-surface-100 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
        <template x-if="!editing">
          <%= heroicon "pencil-square", options: { class: "w-4 h-4 mr-1.5 text-surface-500" } %>
          Edit
        </template>
        <template x-if="editing">
          <%= heroicon "x-mark", options: { class: "w-4 h-4 mr-1.5 text-surface-500" } %>
          Close
        </template>
      </button>
    </div>
    
    <div x-show="!editing" class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Address Section -->
      <div class="space-y-4">
        <h3 class="text-lg font-semibold flex items-center gap-2 text-surface-900">
          <%= heroicon "map-pin", options: { class: "w-5 h-5 text-surface-500" } %>
          Address
        </h3>
        <div class="pl-7 space-y-1 text-surface-700">
          <p>
            <span id="street-number-display"></span>
            <span id="street-display"></span>
          </p>
          <p>
            <span id="postal-code-display"></span>
            <span id="city-display"></span>
          </p>
          <p id="state-display"></p>
          <p id="country-display"></p>
        </div>
      </div>

      <!-- Contact Section -->
      <div class="space-y-4">
        <h3 class="text-lg font-semibold flex items-center gap-2 text-surface-900">
          <%= heroicon "information-circle", options: { class: "w-5 h-5 text-surface-500" } %>
          Contact
        </h3>
        <div class="pl-7 space-y-3">
          <p class="flex items-center gap-2 text-surface-700" id="phone-container">
            <%= heroicon "phone", options: { class: "w-4 h-4 text-surface-500" } %>
            <span id="phone-display"></span>
          </p>
          
          <p class="flex items-center gap-2" id="url-container">
            <%= heroicon "globe-alt", options: { class: "w-4 h-4 text-surface-500" } %>
            <a id="url-display" 
               target="_blank" 
               class="text-primary-600 hover:text-primary-500 underline"></a>
          </p>

          <p class="flex items-center gap-2 text-surface-700" id="business-status-container">
            <%= heroicon "building-storefront", options: { class: "w-4 h-4 text-surface-500" } %>
            <span id="business-status-display"></span>
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Function to update display values
function updateDisplayValues() {
  const fields = {
    'restaurant_name': ['name-display', 'textContent'],
    'restaurant_street_number': ['street-number-display', 'textContent'],
    'restaurant_street': ['street-display', 'textContent'],
    'restaurant_postal_code': ['postal-code-display', 'textContent'],
    'restaurant_city': ['city-display', 'textContent'],
    'restaurant_state': ['state-display', 'textContent'],
    'restaurant_country': ['country-display', 'textContent'],
    'restaurant_phone_number': ['phone-display', 'textContent'],
    'restaurant_url': ['url-display', 'href'],
    'restaurant_business_status': ['business-status-display', 'textContent']
  };

  Object.entries(fields).forEach(([inputId, [displayId, property]]) => {
    const input = document.getElementById(inputId);
    const display = document.getElementById(displayId);
    
    if (input && display) {
      display[property] = input.value;
      if (inputId === 'restaurant_url') {
        display.textContent = input.value;
      }
    }
  });
}

// Update display when place is selected
document.addEventListener('place-selected', updateDisplayValues);

// Update display when editing is toggled off
document.addEventListener('alpine:init', () => {
  Alpine.effect(() => {
    const editing = Alpine.$data(document.getElementById('restaurant-form')).editing;
    if (!editing) {
      updateDisplayValues();
    }
  });
});

// Add input event listeners to all form fields
document.addEventListener('DOMContentLoaded', function() {
  const fields = [
    'name', 'address', 'street_number', 'street', 'postal_code',
    'city', 'state', 'country', 'phone_number', 'url', 'business_status'
  ];
  
  fields.forEach(field => {
    const input = document.getElementById(`restaurant_${field}`);
    if (input) {
      input.addEventListener('input', updateDisplayValues);
    }
  });
});
</script>
